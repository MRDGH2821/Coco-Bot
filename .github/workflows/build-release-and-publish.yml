name: Build Release and Publish

on:
  push:
    tags:
      # Matches semantic version tags like v1.0.0, v1.2.3-beta, etc.
      - v[0-9]+.[0-9]+.[0-9]+*

env:
  CARGO_TERM_COLOR: always

permissions: read-all

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux GNU targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-amd64-gnu
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64-gnu
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            name: linux-armv7-gnu

          # Linux musl targets (statically linked)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-amd64-musl
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-arm64-musl
          - target: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            name: linux-armv7-musl

          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-amd64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: windows-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: --locked --release
          strip: true

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          # Rust produces binary without extension on Unix
          source_binary="coco-bot"
          # We want to package it with .bin extension
          target_binary="coco-bot.bin"
          if [ -f "target/${{ matrix.target }}/release/$source_binary" ]; then
            cp "target/${{ matrix.target }}/release/$source_binary" "dist/$target_binary"
            # Copy assets
            cp -r src/assets dist/
            # Copy README.md and sample.env
            cp README.md dist/
            cp sample.env dist/
            # Create archive
            tar -czf "dist/coco-bot-${{ matrix.name }}.tar.gz" -C dist "$target_binary" assets README.md sample.env
            # Create checksum (cross-platform compatible)
            cd dist
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "coco-bot-${{ matrix.name }}.tar.gz" > "coco-bot-${{ matrix.name }}.tar.gz.sha256"
            elif command -v shasum >/dev/null 2>&1; then
              shasum -a 256 "coco-bot-${{ matrix.name }}.tar.gz" > "coco-bot-${{ matrix.name }}.tar.gz.sha256"
            else
              echo "No SHA256 checksum tool found"
              exit 1
            fi
          else
            echo "Binary not found at expected location"
            find target -name "$source_binary*" -type f
            exit 1
          fi

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p dist
          $binary_name = "coco-bot.exe"
          if (Test-Path "target/${{ matrix.target }}/release/$binary_name") {
            Copy-Item "target/${{ matrix.target }}/release/$binary_name" "dist/$binary_name"
            # Copy assets
            Copy-Item -Recurse "src/assets" "dist/"
            # Copy README.md and sample.env
            Copy-Item "README.md" "dist/"
            Copy-Item "sample.env" "dist/"
            # Create archive
            Compress-Archive -Path "dist/$binary_name", "dist/assets", "dist/README.md", "dist/sample.env" -DestinationPath "dist/coco-bot-${{ matrix.name }}.zip"
            # Create checksum
            $hash = Get-FileHash "dist/coco-bot-${{ matrix.name }}.zip" -Algorithm SHA256
            "$($hash.Hash.ToLower())  coco-bot-${{ matrix.name }}.zip" | Out-File -FilePath "dist/coco-bot-${{ matrix.name }}.zip.sha256" -Encoding ASCII
          } else {
            Write-Host "Binary not found at expected location"
            Get-ChildItem -Path target -Name "$binary_name*" -Recurse
            exit 1
          }
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coco-bot-${{ matrix.name }}
          path: |
            dist/coco-bot-${{ matrix.name }}.*
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to generate changelog

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true
          limit-access-to-actor: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Cocogitto release
        id: release
        uses: cocogitto/cocogitto-action@v3

      - name: Organize release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "coco-bot-*.*" -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Extract release notes
        id: extract_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >>"${GITHUB_OUTPUT}"
          # Extract release notes using cocogitto
          cog changelog --at "${VERSION}" >release_notes.md
          echo "[See Complete changelog](https://github.com/MRDGH2821/Coco-Bot/blob/main/CHANGELOG.md)" >>release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Coco-bot ${{ steps.extract_notes.outputs.version }}
          body_path: release_notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
